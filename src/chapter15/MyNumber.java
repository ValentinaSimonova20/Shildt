package chapter15;

// продемонстрировать применение простого лямбда-выражения

public interface MyNumber {
    double getValue();
}

class LambdaDemo {
    public static void main(String[] args) {
        MyNumber myNumber; // объявить ссылку на функциональный интерфейс

        // Здесь лямбда-выражение просто является
        // константным выражением. Когда оно присваивается
        // ссылочной переменной myNum, получается экземпляр
        // класса, в котором лямбда-выражение реализует
        // метод getValue() из функционального
        // интерфейса MyNumber
        myNumber = () -> 123.45;

        // вызывать метод getValue(), предоставляемый
        // присвоенным ранее лямбда-выражением
        System.out.println("Фиксированное значение: " + myNumber.getValue());

        // А здесь используется более сложное выражение
        myNumber = () -> Math.random() * 100;

        // В следующих строках кода вызывается лямба-выражение
        // из предыдущей строки кода
        System.out.println("Случайное значение: " + myNumber.getValue());

        System.out.println("Еще одно случайное значение: " + myNumber.getValue());

        // Лямба-выражение должно быть совместимо по типу
        // данных с абстрактным методом,
        // определяемым в функциональном интерфейсе
        // Поэтому следующая строка кода ошибочна:
       // myNumber = () -> "123"; // ОШИБКА
    }
}
